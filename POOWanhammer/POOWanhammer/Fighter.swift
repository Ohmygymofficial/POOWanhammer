//
//  Characters.swift
//  POOWanhammer
//
//  Created by E&M Life Project on 10/05/2019.
//  Copyright ¬© 2019 Erwan PASTE. All rights reserved.
//

import Foundation

class Fighter { // by default, we choose Warrior
    
    var name = ""
    var numberFetich = 0
    var category = Category.warrior
    var weapon = Weapon(nameOfWeapon: "une √©p√©e", powerOfWeapon: 10, weaponType: Weapon.WeaponType.sword)
    var special = Special.doubleAttack
    var lifePoint: Int = 100
    var bonusZone = Bonus(HistoryOfBonus: "", powerOfBonus: 0, bonusType: .randomBonusZone)
    var firstUI = true
    // Static to archive all the fighter name and check is Unique
    static var allFighterName = [String]()
    
    
    // init 1 with method
    init(firstUI: Bool) {
        self.firstUI = firstUI
    }
    
    // init 2 :
    init(name: String, numberFetich: Int) {
        self.name = name
        self.numberFetich = numberFetich
    }
    
    
    /**
     nameOfTheFighter : Take all the fighter Name
     */
    func nameOfTheFighter(category: Category) -> String {
        
        var nameOfFighterOk = ""
        
        // normal mode
        print("\r Quel est le doux prenom de ce \(category.rawValue) ?")
        if let nameOfFighter = readLine() {
            
            // Check if it's empty
            if nameOfFighter == ""  { //
                print("Vous devez choisir un nom de Fighter ;)")
                return nameOfTheFighter(category: category)
            }
            
            // check if already exist
            let isOk =  isFighterAlreadyExist(what: nameOfFighter)
            if isOk  { //
                print("Ce prenom de Fighter existe d√©j√† ... ^^  On en choisit une autre ? ")
                return nameOfTheFighter(category: category)
            }
            
            // if the code can read this, is that the User Input is ok !
            nameOfFighterOk = nameOfFighter
        }
        return nameOfFighterOk
    }
    
    
    /**
     isFighterAlreadyExist : Static func to check if one User Input already exist thanks to the return
     */
    func isFighterAlreadyExist(what: String) -> Bool {
        
        for eachFighter in Fighter.allFighterName {
            if what.uppercased() == eachFighter.uppercased() {
                return true
            }
        }
        // if it's OK : We add this one in the Array
        Fighter.allFighterName.append(what)
        return false
    }
    
    
    /**
     numberFetich : ask FetichNumber of the fighter
     */
    func setNumberFetich(demo: Bool) -> Int {
        
        //in demo mode : give random Fetich Number
        if demo == true {
            return Int.random(in: 1..<5)
        }
        
        let numberTestOk = ""
        repeat { // repeat while var is empty
            print("Quel est ton num√©ro f√©tiche entre 1 et 5 ")
            if let numberTest = readLine() {
                if let numberTestOk = Int(numberTest) { // check if it's Int
                    if numberTestOk > 0, numberTestOk < 6 {
                        return numberTestOk
                    } else { // if it's not 1 2 3 4 5  print this :
                        print("Le chiffre doit √™tre sup√©rieur √† 0, et inf√©rieur √† 6")
                    }
                } else { // if it's Int, so print :
                    print("Cela ne peut √™tre qu'un num√©ro !")
                }
                
            } else {
                print("Tu dois donner un num√©ro f√©tiche √† ton Fighter dans la fonction numberTest ;)")
            }
        } while numberTestOk == ""
        return 1
    }
    
    
    /**
     FightersSettings : To print the caracteristic of the Fighters
     */
    func fightersSettings() {
        print("\n\n Voici les caract√©ristiques des personnages :"
            + "\n üó° Le \(Category.warrior.rawValue): PV : 100, D√©g√¢ts : 10, sp√©cial : Double Attaque"
            + "\n üë®‚Äçüé§ Le \(Category.dwarf.rawValue) : PV : 80, Arme : H√¢che, D√©g√¢ts : 20, sp√©cial : Double D√©g√¢ts"
            + "\n üëπ Le \(Category.colossus.rawValue) : PV : 200, D√©g√¢ts : 5, sp√©cial : Frayeur (Adversaire perd son tour)"
            + "\n üßô‚Äç‚ôÄÔ∏è Le \(Category.wizard.rawValue) : PV : 150, Soins : +15, sp√©cial : FireBall d√©g√¢ts 30")
    }
    
    
    /**
     func openRandomChest() : to take new weapon in random Chest when is appear
     */
    func openRandomChest(attackerChoosen: Fighter) {
        
        
        print("\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tüòáüòáüòáüòá WAOOOW ! Un coffre est tomb√© devant toi !!üòáüòáüòáüòá")
        game.makePause()
        print("\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tTu avais \(attackerChoosen.weapon.nameOfWeapon)")
        let oldValue = attackerChoosen.weapon.powerOfWeapon
        let newWeapon = attackerChoosen.changeWeapon(attackerChoosen: attackerChoosen)
        attackerChoosen.weapon = newWeapon
        print("\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tTu t'√©quipes maintenant d'\(attackerChoosen.weapon.nameOfWeapon)")
        compareNewAndOldWeaponStrength(newValue: newWeapon.powerOfWeapon, oldValue: oldValue)
        game.makePause()
    }
    
    
    /**
     changeWeapon() : Fighter's have new weapon and new power
     */
    func changeWeapon(attackerChoosen: Fighter) -> Weapon {
        
        var newWeapon = Weapon(nameOfWeapon: "ChestSurprise", powerOfWeapon: 0, weaponType: .chestSurprise)
        
        // launch Damage Array
        let weaponChestContent = [
            Weapon(nameOfWeapon: "une √©p√©e dor√©e", powerOfWeapon: 15, weaponType: .goldSword),
            Weapon(nameOfWeapon: "une h√¢che de Rahan", powerOfWeapon: 25, weaponType: .rahanAxe),
            Weapon(nameOfWeapon: "une grenade", powerOfWeapon: 30, weaponType: .grenade),
            Weapon(nameOfWeapon: "un fl√©au d'arme", powerOfWeapon: 25, weaponType: .weaponFlail),
            Weapon(nameOfWeapon: "un tire-bouchon", powerOfWeapon: 5, weaponType: .corkscrew),
            ]
        
        // launch Heal Array
        let weaponHealContent = [
            Weapon(nameOfWeapon: "une pur√©e de brocoli", powerOfWeapon: 15, weaponType: .broccoli),
            Weapon(nameOfWeapon: "une barre prot√©in√©e", powerOfWeapon: 25, weaponType: .proteinBar),
            Weapon(nameOfWeapon: "une whey √† la banane", powerOfWeapon: 30, weaponType: .bananaWhey),
            Weapon(nameOfWeapon: "une framboise fraiche", powerOfWeapon: 25, weaponType: .raspberry),
            Weapon(nameOfWeapon: "un BigMac", powerOfWeapon: 5, weaponType: .bigMac),
            ]
        
        if attackerChoosen.category == Category.wizard {
            newWeapon = weaponHealContent[Int(arc4random_uniform(UInt32(weaponHealContent.count)))]
        } else {
            newWeapon = weaponChestContent[Int(arc4random_uniform(UInt32(weaponChestContent.count)))]
        }
        return newWeapon
    }
    
    
    /**
     compareNewAndOldWeaponStrength() : To print different message depend of the new Strength of Weapon
     */
    func compareNewAndOldWeaponStrength(newValue: Int, oldValue: Int) {
        
        if oldValue > newValue {
            print("\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tTa puissance d'action est descendue √† : \(newValue)")
        } else if oldValue < newValue {
            print("\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tTa puissance d'action est mont√©e √† : \(newValue)")
        } else {
            print("\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tLa valeur de ton arme est rest√©e identique")
        }
    }
    
    
    /**
     func useFetichNumber() : to use Fetich Action
     */
    func useFetichNumber(attackerChoosen: Fighter, whoReceiveChoosen: Fighter, defenderIs: Players, attackerIs: Players, bonusIsLuck: Bool, bonusZone: Bool) {
        //check if one team is dead
        defenderIs.checkTeamAreAlive(attackerIs: attackerIs, defenderIs: defenderIs)
        
        print("\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tüòçüòçüòçüòç FETICH TIME ! C'est ton jour de chance !!üòçüòçüòçüòç")
        print("\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tTon \(attackerChoosen.category.rawValue) utilise sa \(attackerChoosen.special.rawValue)")
        attackerChoosen.specialAttack(attackerChoosen: attackerChoosen, whoReceiveChoosen: whoReceiveChoosen, defenderIs: defenderIs, attackerIs: attackerIs, bonusIsLuck: bonusIsLuck, bonusZone: bonusZone)
        //update TeamLifePoint
        defenderIs.updateTeamLifePointAndArray(defenderIs: defenderIs, attackerIs: attackerIs)
    }
    
    
    /**
     specialAttack : Nothing on mother Class
     */
    func specialAttack(attackerChoosen: Fighter, whoReceiveChoosen: Fighter, defenderIs: Players, attackerIs: Players, bonusIsLuck: Bool, bonusZone: Bool) {
    }
    
    
    /**
     takeBonusZone
     */
    func takeBonusZone(attackerChoosen: Fighter) -> Bonus {
        
        var resultbonusZone = Bonus(HistoryOfBonus: "", powerOfBonus: 0, bonusType: .randomBonusZone)
        
        let bonusZoneFighter = [
            Bonus(HistoryOfBonus: "prend confiance et envoit un autre coup puissant au ventre de ", powerOfBonus: 50, bonusType: .fBonus1),
            Bonus(HistoryOfBonus: "dans son √©lan d'attaque, ajoute un revers puissant en pleine figure de ", powerOfBonus: 60, bonusType: .fBonus2),
            Bonus(HistoryOfBonus: "√©nerv√©, prend appui sur un arbre, et envoi un coup fatal en pleine gorge de ", powerOfBonus: 90, bonusType: .fBonus3),
            Bonus(HistoryOfBonus: "utilise son courage pour ajouter une s√©rie de 6 coups de t√™te en plein nez de ", powerOfBonus: 60, bonusType: .fBonus4),
            Bonus(HistoryOfBonus: "nous fait un coup retourn√© suppl√©mentaire en plein dos de ", powerOfBonus: 50, bonusType: .fBonus5),
            ]
        
        let bonusZoneWizard = [
            Bonus(HistoryOfBonus: "rassemble sa concentration et arrive √† ajouter un sort de soin puissant pour ", powerOfBonus: 50, bonusType: .wBonus1),
            Bonus(HistoryOfBonus: "ajoute 2 mouvements sp√©ciaux et envoi un soin pour ", powerOfBonus: 60, bonusType: .wBonus2),
            Bonus(HistoryOfBonus: "utilise sa derni√®re formule ! Un soin puissant est invoqu√© pour ", powerOfBonus: 90, bonusType: .wBonus3),
            ]
        
        if attackerChoosen.category == Category.wizard {
            resultbonusZone = bonusZoneWizard[Int(arc4random_uniform(UInt32(bonusZoneWizard.count)))]
        } else {
            resultbonusZone = bonusZoneFighter[Int(arc4random_uniform(UInt32(bonusZoneFighter.count)))]
        }
        return resultbonusZone
    }
    
    
    /**
     takeUnluckZone
     */
    func takeUnluckZone(attackerChoosen: Fighter) -> Bonus{
        
        var resultbonusZone = Bonus(HistoryOfBonus: "", powerOfBonus: 0, bonusType: .randomBonusZone)
        
        let bonusZoneFighter = [
            Bonus(HistoryOfBonus: "prend confiance et envoit un autre coup puissant .... mais il glisse et cr√©e une blessure au ventre sur ", powerOfBonus: 50, bonusType: .fBonus1),
            Bonus(HistoryOfBonus: "dans son √©lan d'attaque, ajoute un revers puissant..mais il manque son coup et cr√©e une blessure au bras sur ", powerOfBonus: 60, bonusType: .fBonus2),
            Bonus(HistoryOfBonus: "√©nerv√©, prend appui sur un arbre, pour envoyer un coup fatal en pleine gorge...mais l'arbre est glissant, il rate son attaque et cr√©e une profonde blessure sur ", powerOfBonus: 90, bonusType: .fBonus3),
            Bonus(HistoryOfBonus: "utilise son courage pour ajouter des coups de t√™te...mais d√©sorient√©, il cr√©e des blessures sur ", powerOfBonus: 60, bonusType: .fBonus4),
            Bonus(HistoryOfBonus: "nous fait un coup retourn√© suppl√©mentaire ...son arme lui glisse des mains et il cr√©e une entaille sur ", powerOfBonus: 50, bonusType: .fBonus5),
            ]
        
        let bonusZoneWizard = [
            Bonus(HistoryOfBonus: "rassemble sa concentration pour lancer un soin puissant...mais il est d√©concentr√© et son soin est envoy√© sur ", powerOfBonus: 50, bonusType: .wBonus1),
            Bonus(HistoryOfBonus: "ajoute 2 mouvements sp√©ciaux pour soigner encore ! Mouvements r√¢t√©s....les soins arrivent sur ", powerOfBonus: 60, bonusType: .wBonus2),
            Bonus(HistoryOfBonus: "utilise sa derni√®re formule ! Un soin puissant est invoqu√©! Mais la formule est pas la bonne... et elle soigne ", powerOfBonus: 90, bonusType: .wBonus3),
            ]
        
        if attackerChoosen.category == Category.wizard {
            resultbonusZone = bonusZoneWizard[Int(arc4random_uniform(UInt32(bonusZoneWizard.count)))]
        } else {
            resultbonusZone = bonusZoneFighter[Int(arc4random_uniform(UInt32(bonusZoneFighter.count)))]
        }
        return resultbonusZone
    }
    
    
    /**
     updateCareOrDamage : To update lifePoint of the good fighter (depend of the action)
     */
    func updateCareOrDamage(attackerChoosen: Fighter,whoReceiveChoosen: Fighter, defenderIs: Players, attackerIs: Players, bonusIsLuck: Bool, bonusZone: Bool) {
        
        // var powerOfTheAction : Depend of "Weapon Strenght" if it's a normal action
        var powerOfTheAction = attackerChoosen.weapon.powerOfWeapon
        
        // depend If the Attacker have a Bonus zone
        if bonusZone == true {
            print("\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t üÖ±üÖ±üÖ± BONUS ZONE üÖ±üÖ±üÖ±!!!!!")
            powerOfTheAction = attackerChoosen.bonusZone.powerOfBonus
            // and the fighter who receive the action depend of the result of bonusIsLuck
            if bonusIsLuck == true { //if is lucky
                print("\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t LUCKY DAY !!!!!")
                if attackerChoosen.category != Category.wizard { // for Fighters : give Damage to a random opponent fighter
                    let randomFighterIs = Int(arc4random_uniform(UInt32(defenderIs.fightersArray.count)))
                    defenderIs.fightersArray[randomFighterIs].lifePoint -= powerOfTheAction
                    // print result
                    game.printAction(attackerChoosen: attackerChoosen, whoReceiveChoosen: defenderIs.fightersArray[randomFighterIs], bonusZone: bonusZone)
                    //update TeamLifePoint
                    defenderIs.updateTeamLifePointAndArray(defenderIs: defenderIs, attackerIs: attackerIs)
                } else { // for wizard : Add powerOfTheAction to a random Team Fighter
                    let randomFighterIs = Int(arc4random_uniform(UInt32(attackerIs.fightersArray.count)))
                    attackerIs.fightersArray[randomFighterIs].lifePoint += powerOfTheAction
                    // print result
                    game.printAction(attackerChoosen: attackerChoosen, whoReceiveChoosen: attackerIs.fightersArray[randomFighterIs], bonusZone: bonusZone)
                    //update TeamLifePoint
                    attackerIs.updateTeamLifePointAndArray(defenderIs: defenderIs, attackerIs: attackerIs)
                }
            } else {   //if is UNlucky
                print("\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t ü§¨ü§¨ü§¨ UNLUCKY BAD DAY ü§¨ü§¨ü§¨!!!!!")
                if attackerChoosen.category != Category.wizard { // for Fighters : give Damage to a random TEAM fighter
                    let randomFighterIs = Int(arc4random_uniform(UInt32(attackerIs.fightersArray.count)))
                    attackerIs.fightersArray[randomFighterIs].lifePoint -= powerOfTheAction
                    // print result
                    game.printAction(attackerChoosen: attackerChoosen, whoReceiveChoosen: attackerIs.fightersArray[randomFighterIs], bonusZone: bonusZone)
                    //update TeamLifePoint
                    attackerIs.updateTeamLifePointAndArray(defenderIs: attackerIs, attackerIs: attackerIs)
                    
                } else { // for wizard : Add powerOfTheAction to a random opponent Fighter
                    let randomFighterIs = Int(arc4random_uniform(UInt32(defenderIs.fightersArray.count)))
                    defenderIs.fightersArray[randomFighterIs].lifePoint += powerOfTheAction
                    // print result
                    game.printAction(attackerChoosen: attackerChoosen, whoReceiveChoosen: defenderIs.fightersArray[randomFighterIs], bonusZone: bonusZone)
                    //update TeamLifePoint
                    defenderIs.updateTeamLifePointAndArray(defenderIs: defenderIs, attackerIs: attackerIs)
                }
            }
        } else { // IF BONUS ZONE IS FALSE
            if attackerChoosen.category != Category.wizard {
                whoReceiveChoosen.lifePoint -= attackerChoosen.weapon.powerOfWeapon
                // give 0 value if the fighter is dead (no negative count)
                if whoReceiveChoosen.lifePoint <= 0 {
                    print("\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t‚ò†‚ò†‚ò† WOWWWW LE WANHAMMER SE REDUIT : \(whoReceiveChoosen.name) est mort !‚ò†‚ò†‚ò†")
                    whoReceiveChoosen.lifePoint = 0
                }
            } else {
                whoReceiveChoosen.lifePoint += attackerChoosen.weapon.powerOfWeapon
            }
        }
    }
}
